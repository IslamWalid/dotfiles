snippet im "import statement" b
import "${1:package}"$0
endsnippet

snippet ims "import block" b
import (
	"${1:package}"$0
)
endsnippet

snippet co "constant statement" b
const ${1:name} = ${2:value}
endsnippet

snippet cos "constant block" b
const (
	${1:name} = ${2:value}
)
endsnippet

snippet var "variable declaration" b
var ${1:name} ${2:type}
endsnippet

snippet vars "variable block" b
var (
	${1:name} ${2:type} = ${3:value}
)
endsnippet

snippet tyf "type function declaration" b
type ${1:name} func($3) $4
endsnippet

snippet tyi "type interface declaration" b
type ${1:name} interface {
	$0
}
endsnippet

snippet tys "type struct declaration" b
type ${1:name} struct {
	$0
}
endsnippet

snippet pkgm "main package and function" b
package main

func main() {
	$0
}
endsnippet

snippet main "main function" b
func main() {
	$1
}
endsnippet

snippet func "function declaration" b
func $1($2) $3 {
	$0
}
endsnippet

snippet meth "Snippet for method declaration"
func (${1:receiver} ${2:type}) ${3:method}($4) $5 {
	$0
}
endsnippet

snippet if "if statement" b
if ${1:condition} {
	$0
}
endsnippet

snippet elif "else if branch" w
else if ${1:condition} {
	$0
}
endsnippet

snippet else "else branch" w
else {
	$0
}
endsnippet

snippet ierr "if err != nil" b
if err != nil {
	${1:return ${2:nil, }${3:err}}
}
endsnippet

snippet switch "switch statement" b
switch ${1:expression} {
case ${2:condition}:
	$0
}
endsnippet

snippet sel "Snippet for select statement"
select {
case ${1:condition}
	$0
}
endsnippet

snippet case "case statement" b
case ${1:condition}:$0
endsnippet

snippet for "Pure for loop" b
for ${1:condition} {
	$0
}
endsnippet

snippet fori "Increament for loop" b
for ${1:i} := ${2:0}; $1 < ${3:count}; $1${4:++} {
	$0
}
endsnippet

snippet forr "for range loop" b
for ${1:_, }${2:v} := range ${3:v} {
	$0
}
endsnippet

snippet json "struct json tag" w
`json:"$1"`$0
endsnippet

snippet okmap
if ${1:value}, ok := ${2:map}[${3:key}]; ok == true {
	$0
}
endsnippet

snippet chan "channel declaration" w
chan ${1:type}
endsnippet

snippet map "map declaration" w
map[${1:type}]${2:type}
endsnippet

snippet in "empty interface" w
interface{}
endsnippet

snippet make "make statement" w
make(${1:type}, ${2:0})$0
endsnippet

snippet new "Snippet for new statement" w
new(${1:type})$0
endsnippet

snippet go "Anonymous goroutine declaration" b
go func($1) {
	$0
}($2)
endsnippet

snippet gof "goroutine declaration" b
go ${1:func}($0)
endsnippet

snippet tfunc "Test function" b
func Test$1(t *testing.T) {
	$0
}
endsnippet

snippet tmain "TestMain function" b
func TestMain(m *testing.M) {
	$1

	os.Exit(m.Run())
}
endsnippet

snippet bfunc "Benchmark function" b
func Benchmark$1(b *testing.B) {
	for ${2:i} := 0; ${2:i} < b.N; ${2:i}++ {
		$0
	}
}
endsnippet

snippet efunc "Example function" b
func Example$1() {
	$2
	//Output:
	$3
}
endsnippet
